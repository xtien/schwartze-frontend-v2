/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AddLocationRequest } from '../model';
// @ts-ignore
import type { AddLocationResult } from '../model';
// @ts-ignore
import type { CombineLocationRequest } from '../model';
// @ts-ignore
import type { CombineLocationResult } from '../model';
// @ts-ignore
import type { DeleteLocationRequest } from '../model';
// @ts-ignore
import type { DeleteLocationResult } from '../model';
// @ts-ignore
import type { LocationResult } from '../model';
// @ts-ignore
import type { LocationUpdateRequest } from '../model';
// @ts-ignore
import type { LocationsRequest } from '../model';
// @ts-ignore
import type { LocationsResult } from '../model';
// @ts-ignore
import type { UpdateLocationRequest } from '../model';
/**
 * AdminLocationApi - axios parameter creator
 * @export
 */
export const AdminLocationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AddLocationRequest} addLocationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addLocation: async (addLocationRequest: AddLocationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addLocationRequest' is not null or undefined
            assertParamExists('addLocation', 'addLocationRequest', addLocationRequest)
            const localVarPath = `/admin/addLocation/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addLocationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeleteLocationRequest} deleteLocationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLocation: async (deleteLocationRequest: DeleteLocationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteLocationRequest' is not null or undefined
            assertParamExists('deleteLocation', 'deleteLocationRequest', deleteLocationRequest)
            const localVarPath = `/admin/deleteLocation/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteLocationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CombineLocationRequest} combineLocationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCombinePerson1: async (combineLocationRequest: CombineLocationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'combineLocationRequest' is not null or undefined
            assertParamExists('getCombinePerson1', 'combineLocationRequest', combineLocationRequest)
            const localVarPath = `/admin/getCombineLocation/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(combineLocationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LocationsRequest} locationsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationsForIds: async (locationsRequest: LocationsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationsRequest' is not null or undefined
            assertParamExists('getLocationsForIds', 'locationsRequest', locationsRequest)
            const localVarPath = `/admin/getLocationsForIds/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(locationsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CombineLocationRequest} combineLocationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCombinePerson1: async (combineLocationRequest: CombineLocationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'combineLocationRequest' is not null or undefined
            assertParamExists('putCombinePerson1', 'combineLocationRequest', combineLocationRequest)
            const localVarPath = `/admin/putCombineLocation/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(combineLocationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LocationUpdateRequest} locationUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLocation: async (locationUpdateRequest: LocationUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationUpdateRequest' is not null or undefined
            assertParamExists('updateLocation', 'locationUpdateRequest', locationUpdateRequest)
            const localVarPath = `/admin/update_location/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(locationUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateLocationRequest} updateLocationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLocation1: async (updateLocationRequest: UpdateLocationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateLocationRequest' is not null or undefined
            assertParamExists('updateLocation1', 'updateLocationRequest', updateLocationRequest)
            const localVarPath = `/admin/updateLocationDetails/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateLocationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminLocationApi - functional programming interface
 * @export
 */
export const AdminLocationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminLocationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AddLocationRequest} addLocationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addLocation(addLocationRequest: AddLocationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddLocationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addLocation(addLocationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminLocationApi.addLocation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {DeleteLocationRequest} deleteLocationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLocation(deleteLocationRequest: DeleteLocationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteLocationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLocation(deleteLocationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminLocationApi.deleteLocation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CombineLocationRequest} combineLocationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCombinePerson1(combineLocationRequest: CombineLocationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CombineLocationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCombinePerson1(combineLocationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminLocationApi.getCombinePerson1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {LocationsRequest} locationsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocationsForIds(locationsRequest: LocationsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocationsResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLocationsForIds(locationsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminLocationApi.getLocationsForIds']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CombineLocationRequest} combineLocationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCombinePerson1(combineLocationRequest: CombineLocationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CombineLocationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putCombinePerson1(combineLocationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminLocationApi.putCombinePerson1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {LocationUpdateRequest} locationUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLocation(locationUpdateRequest: LocationUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLocation(locationUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminLocationApi.updateLocation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateLocationRequest} updateLocationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLocation1(updateLocationRequest: UpdateLocationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLocation1(updateLocationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminLocationApi.updateLocation1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AdminLocationApi - factory interface
 * @export
 */
export const AdminLocationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminLocationApiFp(configuration)
    return {
        /**
         * 
         * @param {AddLocationRequest} addLocationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addLocation(addLocationRequest: AddLocationRequest, options?: RawAxiosRequestConfig): AxiosPromise<AddLocationResult> {
            return localVarFp.addLocation(addLocationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeleteLocationRequest} deleteLocationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLocation(deleteLocationRequest: DeleteLocationRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteLocationResult> {
            return localVarFp.deleteLocation(deleteLocationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CombineLocationRequest} combineLocationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCombinePerson1(combineLocationRequest: CombineLocationRequest, options?: RawAxiosRequestConfig): AxiosPromise<CombineLocationResult> {
            return localVarFp.getCombinePerson1(combineLocationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LocationsRequest} locationsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationsForIds(locationsRequest: LocationsRequest, options?: RawAxiosRequestConfig): AxiosPromise<LocationsResult> {
            return localVarFp.getLocationsForIds(locationsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CombineLocationRequest} combineLocationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCombinePerson1(combineLocationRequest: CombineLocationRequest, options?: RawAxiosRequestConfig): AxiosPromise<CombineLocationResult> {
            return localVarFp.putCombinePerson1(combineLocationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LocationUpdateRequest} locationUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLocation(locationUpdateRequest: LocationUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<LocationResult> {
            return localVarFp.updateLocation(locationUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateLocationRequest} updateLocationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLocation1(updateLocationRequest: UpdateLocationRequest, options?: RawAxiosRequestConfig): AxiosPromise<LocationResult> {
            return localVarFp.updateLocation1(updateLocationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminLocationApi - object-oriented interface
 * @export
 * @class AdminLocationApi
 * @extends {BaseAPI}
 */
export class AdminLocationApi extends BaseAPI {
    /**
     * 
     * @param {AddLocationRequest} addLocationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminLocationApi
     */
    public addLocation(addLocationRequest: AddLocationRequest, options?: RawAxiosRequestConfig) {
        return AdminLocationApiFp(this.configuration).addLocation(addLocationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeleteLocationRequest} deleteLocationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminLocationApi
     */
    public deleteLocation(deleteLocationRequest: DeleteLocationRequest, options?: RawAxiosRequestConfig) {
        return AdminLocationApiFp(this.configuration).deleteLocation(deleteLocationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CombineLocationRequest} combineLocationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminLocationApi
     */
    public getCombinePerson1(combineLocationRequest: CombineLocationRequest, options?: RawAxiosRequestConfig) {
        return AdminLocationApiFp(this.configuration).getCombinePerson1(combineLocationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LocationsRequest} locationsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminLocationApi
     */
    public getLocationsForIds(locationsRequest: LocationsRequest, options?: RawAxiosRequestConfig) {
        return AdminLocationApiFp(this.configuration).getLocationsForIds(locationsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CombineLocationRequest} combineLocationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminLocationApi
     */
    public putCombinePerson1(combineLocationRequest: CombineLocationRequest, options?: RawAxiosRequestConfig) {
        return AdminLocationApiFp(this.configuration).putCombinePerson1(combineLocationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LocationUpdateRequest} locationUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminLocationApi
     */
    public updateLocation(locationUpdateRequest: LocationUpdateRequest, options?: RawAxiosRequestConfig) {
        return AdminLocationApiFp(this.configuration).updateLocation(locationUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateLocationRequest} updateLocationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminLocationApi
     */
    public updateLocation1(updateLocationRequest: UpdateLocationRequest, options?: RawAxiosRequestConfig) {
        return AdminLocationApiFp(this.configuration).updateLocation1(updateLocationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

