/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { EditReferenceLinkRequest } from '../model';
// @ts-ignore
import type { RemoveReferenceLinkRequest } from '../model';
// @ts-ignore
import type { UpdateReferencesRequest } from '../model';
// @ts-ignore
import type { UpdateReferencesResult } from '../model';
/**
 * AdminReferencesApi - axios parameter creator
 * @export
 */
export const AdminReferencesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {EditReferenceLinkRequest} editReferenceLinkRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editReferenceLink: async (editReferenceLinkRequest: EditReferenceLinkRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'editReferenceLinkRequest' is not null or undefined
            assertParamExists('editReferenceLink', 'editReferenceLinkRequest', editReferenceLinkRequest)
            const localVarPath = `/admin/editReferenceLink/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editReferenceLinkRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RemoveReferenceLinkRequest} removeReferenceLinkRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeReferenceLink: async (removeReferenceLinkRequest: RemoveReferenceLinkRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'removeReferenceLinkRequest' is not null or undefined
            assertParamExists('removeReferenceLink', 'removeReferenceLinkRequest', removeReferenceLinkRequest)
            const localVarPath = `/admin/removeReferenceLink/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(removeReferenceLinkRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateReferencesRequest} updateReferencesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReferences: async (updateReferencesRequest: UpdateReferencesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateReferencesRequest' is not null or undefined
            assertParamExists('updateReferences', 'updateReferencesRequest', updateReferencesRequest)
            const localVarPath = `/admin/updateReferences/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateReferencesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminReferencesApi - functional programming interface
 * @export
 */
export const AdminReferencesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminReferencesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {EditReferenceLinkRequest} editReferenceLinkRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editReferenceLink(editReferenceLinkRequest: EditReferenceLinkRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateReferencesResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editReferenceLink(editReferenceLinkRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminReferencesApi.editReferenceLink']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RemoveReferenceLinkRequest} removeReferenceLinkRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeReferenceLink(removeReferenceLinkRequest: RemoveReferenceLinkRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateReferencesResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeReferenceLink(removeReferenceLinkRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminReferencesApi.removeReferenceLink']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateReferencesRequest} updateReferencesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateReferences(updateReferencesRequest: UpdateReferencesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateReferencesResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateReferences(updateReferencesRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminReferencesApi.updateReferences']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AdminReferencesApi - factory interface
 * @export
 */
export const AdminReferencesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminReferencesApiFp(configuration)
    return {
        /**
         * 
         * @param {EditReferenceLinkRequest} editReferenceLinkRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editReferenceLink(editReferenceLinkRequest: EditReferenceLinkRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateReferencesResult> {
            return localVarFp.editReferenceLink(editReferenceLinkRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RemoveReferenceLinkRequest} removeReferenceLinkRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeReferenceLink(removeReferenceLinkRequest: RemoveReferenceLinkRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateReferencesResult> {
            return localVarFp.removeReferenceLink(removeReferenceLinkRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateReferencesRequest} updateReferencesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReferences(updateReferencesRequest: UpdateReferencesRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateReferencesResult> {
            return localVarFp.updateReferences(updateReferencesRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminReferencesApi - object-oriented interface
 * @export
 * @class AdminReferencesApi
 * @extends {BaseAPI}
 */
export class AdminReferencesApi extends BaseAPI {
    /**
     * 
     * @param {EditReferenceLinkRequest} editReferenceLinkRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminReferencesApi
     */
    public editReferenceLink(editReferenceLinkRequest: EditReferenceLinkRequest, options?: RawAxiosRequestConfig) {
        return AdminReferencesApiFp(this.configuration).editReferenceLink(editReferenceLinkRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RemoveReferenceLinkRequest} removeReferenceLinkRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminReferencesApi
     */
    public removeReferenceLink(removeReferenceLinkRequest: RemoveReferenceLinkRequest, options?: RawAxiosRequestConfig) {
        return AdminReferencesApiFp(this.configuration).removeReferenceLink(removeReferenceLinkRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateReferencesRequest} updateReferencesRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminReferencesApi
     */
    public updateReferences(updateReferencesRequest: UpdateReferencesRequest, options?: RawAxiosRequestConfig) {
        return AdminReferencesApiFp(this.configuration).updateReferences(updateReferencesRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

